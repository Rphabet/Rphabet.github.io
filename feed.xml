<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://rphabet.github.io//</id><title>Big Ben's Log</title><subtitle>BigBen's Log, BBlog</subtitle> <updated>2021-09-16T17:44:20+09:00</updated> <author> <name>Girim Ban</name> <uri>https://rphabet.github.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://rphabet.github.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://rphabet.github.io//"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Girim Ban </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>머신러닝 다중분류 로지스틱 작동 원리 Multinomial Classification</title><link href="https://rphabet.github.io//posts/multinomial/" rel="alternate" type="text/html" title="머신러닝 다중분류 로지스틱 작동 원리 Multinomial Classification" /><published>2021-09-16T17:43:00+09:00</published> <updated>2021-09-16T17:43:47+09:00</updated> <id>https://rphabet.github.io//posts/multinomial/</id> <content src="https://rphabet.github.io//posts/multinomial/" /> <author> <name>Girim Ban</name> </author> <category term="python" /> <category term="ML" /> <summary> Multinomial Classification 기본적인 작동 원리 익숙했던 “맞다/아니다”와 같은 이진분류 회귀 기법의 연장선인 다중 분류에 대해 다뤄보려고 한다. 가장 큰 차이점은 “맞다/아니다”가 아닌, [일번, 이번, 삼번] 등과 같이 선택지가 세개 이상인 것으로 바뀐점이다. 이렇게만 보면 “음 그렇구나” 싶을 수 있겠지만, 내용적인 측면에서 상당히 복잡해진다. 사용했던 loss 함수, 그리고 분류 선택지가 추가될수록 logistic regression의 개수, 행렬곱을 위한 가중치 및 바이아스의 행렬/배열 사이즈 변화 등등 많은 부분에서 변화가 일어난다. 간단하게 그림으로 살펴보자! 그림에서 볼 수 있는 가장 큰 차이점은 데이터를 가르는 선이 한개에서 세개가 되었다는 부분이... </summary> </entry> <entry><title>Kaggle Machine Learning Titanic</title><link href="https://rphabet.github.io//posts/kaggle_titanic/" rel="alternate" type="text/html" title="Kaggle Machine Learning Titanic" /><published>2021-09-09T18:03:00+09:00</published> <updated>2021-09-09T18:03:00+09:00</updated> <id>https://rphabet.github.io//posts/kaggle_titanic/</id> <content src="https://rphabet.github.io//posts/kaggle_titanic/" /> <author> <name>Girim Ban</name> </author> <category term="python" /> <category term="ML" /> <summary> Titanic Machine Learning from Disater 처음 머신러닝을 시작하고, Kaggle에서 데이터를 뒤적뒤적, competition을 기웃거리다보면 빈번하게 접하는 데이터가 바로 이 titanic.csv이지 않나 생각한다. 실제 타이타닉에 승선한 탑승객들에 대한 데이터이며, 각종 정보(features)를 갖고 탑승객이 사망하였는지, 살았는지를 기계학습을 통해 예측하는 로직을 구현할 수 있다. 데이터는 여기에서 다운받자. Logistic Regression Label label값은 0 아니면 1이다. 0: 해당 승객이 죽었다. 1: 해당 승객이 살았다. Environment Setting import numpy as np # 행렬 곱연산 impo... </summary> </entry> <entry><title>python으로 하는 머신러닝 로지스틱 회귀분석 예제 (tensorflow version)</title><link href="https://rphabet.github.io//posts/2021-09-08-Logistic_cancer_example_tf/" rel="alternate" type="text/html" title="python으로 하는 머신러닝 로지스틱 회귀분석 예제 (tensorflow version)" /><published>2021-09-08T20:00:00+09:00</published> <updated>2021-09-08T20:13:19+09:00</updated> <id>https://rphabet.github.io//posts/2021-09-08-Logistic_cancer_example_tf/</id> <content src="https://rphabet.github.io//posts/2021-09-08-Logistic_cancer_example_tf/" /> <author> <name>Girim Ban</name> </author> <category term="python" /> <category term="regression" /> <summary> TensorFlow를 이용한 Logistic Regression 예제 바로 직전 포스팅에선 sklearn을 이용해서 Logistic Regression 모델을 만들고, validation dataset을 예측한 뒤 k-fold cross validation을 통해 모델의 분류성능을 평가해보았다. 이번엔 tensorflow를 이용하여 유방암 데이터를 분석해보자. Environment Setting import numpy as np from sklearn.datasets import load_breast_cancer from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler... </summary> </entry> <entry><title>python으로 하는 머신러닝 로지스틱 회귀분석 예제 (scikit learn version)</title><link href="https://rphabet.github.io//posts/Logistic_cancer_example/" rel="alternate" type="text/html" title="python으로 하는 머신러닝 로지스틱 회귀분석 예제 (scikit learn version)" /><published>2021-09-08T17:41:00+09:00</published> <updated>2021-09-08T19:16:00+09:00</updated> <id>https://rphabet.github.io//posts/Logistic_cancer_example/</id> <content src="https://rphabet.github.io//posts/Logistic_cancer_example/" /> <author> <name>Girim Ban</name> </author> <category term="python" /> <category term="regression" /> <summary> sklearn을 이용한 Logistic Regression 예제 이번엔 위스콘신 대학에서 제공한 유방암 데이터셋을 이용하여 logistic을 구현해보자. tensorflow로도 나름(?) 손쉽게 구현할 수 있으나, 이번엔 sklearn이 제공하는 데이터부터 메서드까지 한번 사용해보고자 한다. sklearn의 k-fold cross validation이란 방식을 이용하면 원본 데이터셋을 train, validation으로 나눠서 작아지는 표본에 대한 단점을 보완할 수 있다. (엄밀히 말하면 holdout cross validation의 단점을 보완함) (cross validation은 일반화 성능을 측정하기위해 데이터를 여러번 반복해서 나누어, 여러 모델을 학습하는 과정을 뜻함) 다만 문제는... </summary> </entry> <entry><title>python으로 하는 머신러닝 다변수 로지스틱 회귀분석</title><link href="https://rphabet.github.io//posts/multivariate_logistic/" rel="alternate" type="text/html" title="python으로 하는 머신러닝 다변수 로지스틱 회귀분석" /><published>2021-09-06T15:18:00+09:00</published> <updated>2021-09-06T15:18:00+09:00</updated> <id>https://rphabet.github.io//posts/multivariate_logistic/</id> <content src="https://rphabet.github.io//posts/multivariate_logistic/" /> <author> <name>Girim Ban</name> </author> <category term="python" /> <category term="regression" /> <summary> Multivariate Logistic Regression 지난번 단일변수를 이용한 로지스틱 회귀분석 포스팅을 올린 뒤, 그대로 다른 영역에 대해 소개하려 했으나 연습겸 한번 더 로지스틱을 다루는 컨텐츠를 올리기로 마음을 먹었다. 이번엔 python, sklearn, 그리고 tensorflow를 이용해 각기 다른 3번의 회귀분석을 해보도록 하자. 대학원 입학에 관련된 데이터를 다룰것이며, 레이블은 합격/불합격으로 합격일 때 1의 값을, 불합격일 때 0의 값을 취하는 admission 데이터를 사용할 예정이다. 데이터는 추후 github에 올려두겠다. 환경설정 import numpy as np import pandas as pd from scipy import stats # 이상치 처리 시... </summary> </entry> </feed>
