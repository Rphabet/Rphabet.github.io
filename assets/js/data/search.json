[ { "title": "머신러닝 다중분류 로지스틱 작동 원리 Multinomial Classification", "url": "/posts/multinomial/", "categories": "python, ML", "tags": "python, ML, 머신러닝, tensorflow, 텐서플로우, Keras, Logistic", "date": "2021-09-16 17:43:00 +0900", "snippet": "Multinomial Classification 기본적인 작동 원리익숙했던 “맞다/아니다”와 같은 이진분류 회귀 기법의 연장선인 다중 분류에 대해 다뤄보려고 한다.가장 큰 차이점은 “맞다/아니다”가 아닌, [일번, 이번, 삼번] 등과 같이 선택지가 세개 이상인 것으로 바뀐점이다.이렇게만 보면 “음 그렇구나” 싶을 수 있겠지만, 내용적인 측면에서 상당히 복잡해진다.사용했던 loss 함수, 그리고 분류 선택지가 추가될수록 logistic regression의 개수, 행렬곱을 위한 가중치 및 바이아스의 행렬/배열 사이즈 변화 등등..." }, { "title": "Kaggle Machine Learning Titanic", "url": "/posts/kaggle_titanic/", "categories": "python, ML", "tags": "python, ML, 머신러닝, tensorflow, 텐서플로우, kaggle, 캐글", "date": "2021-09-09 18:03:00 +0900", "snippet": "Titanic Machine Learning from Disater처음 머신러닝을 시작하고, Kaggle에서 데이터를 뒤적뒤적, competition을 기웃거리다보면 빈번하게 접하는 데이터가 바로 이 titanic.csv이지 않나 생각한다.실제 타이타닉에 승선한 탑승객들에 대한 데이터이며, 각종 정보(features)를 갖고 탑승객이 사망하였는지, 살았는지를 기계학습을 통해 예측하는 로직을 구현할 수 있다.데이터는 여기에서 다운받자.Logistic Regression Labellabel값은 0 아니면 1이다. 0: 해당 승객..." }, { "title": "python으로 하는 머신러닝 로지스틱 회귀분석 예제 (tensorflow version)", "url": "/posts/2021-09-08-Logistic_cancer_example_tf/", "categories": "python, regression", "tags": "python, regression, 회귀분석, ML, 머신러닝, tensorflow, 텐서플로우, logistic, 로지스틱", "date": "2021-09-08 20:00:00 +0900", "snippet": "TensorFlow를 이용한 Logistic Regression 예제바로 직전 포스팅에선 sklearn을 이용해서 Logistic Regression 모델을 만들고, validation dataset을 예측한 뒤 k-fold cross validation을 통해 모델의 분류성능을 평가해보았다.이번엔 tensorflow를 이용하여 유방암 데이터를 분석해보자.Environment Settingimport numpy as npfrom sklearn.datasets import load_breast_cancerfrom sklearn...." }, { "title": "python으로 하는 머신러닝 로지스틱 회귀분석 예제 (scikit learn version)", "url": "/posts/Logistic_cancer_example/", "categories": "python, regression", "tags": "python, regression, 회귀분석, ML, 머신러닝, sklearn, k-fold, logistic, 로지스틱", "date": "2021-09-08 17:41:00 +0900", "snippet": "sklearn을 이용한 Logistic Regression 예제이번엔 위스콘신 대학에서 제공한 유방암 데이터셋을 이용하여 logistic을 구현해보자.tensorflow로도 나름(?) 손쉽게 구현할 수 있으나, 이번엔 sklearn이 제공하는 데이터부터 메서드까지 한번 사용해보고자 한다.sklearn의 k-fold cross validation이란 방식을 이용하면 원본 데이터셋을 train, validation으로 나눠서 작아지는 표본에 대한 단점을 보완할 수 있다. (엄밀히 말하면 holdout cross validation..." }, { "title": "python으로 하는 머신러닝 다변수 로지스틱 회귀분석", "url": "/posts/multivariate_logistic/", "categories": "python, regression", "tags": "python, regression, 회귀분석, ML, 머신러닝, tensorflow, 텐서플로우, logistic, 로지스틱", "date": "2021-09-06 15:18:00 +0900", "snippet": "Multivariate Logistic Regression지난번 단일변수를 이용한 로지스틱 회귀분석 포스팅을 올린 뒤, 그대로 다른 영역에 대해 소개하려 했으나 연습겸 한번 더 로지스틱을 다루는 컨텐츠를 올리기로 마음을 먹었다.이번엔 python, sklearn, 그리고 tensorflow를 이용해 각기 다른 3번의 회귀분석을 해보도록 하자.대학원 입학에 관련된 데이터를 다룰것이며, 레이블은 합격/불합격으로 합격일 때 1의 값을, 불합격일 때 0의 값을 취하는 admission 데이터를 사용할 예정이다.데이터는 추후 githu..." }, { "title": "머신러닝 로지스틱 회귀분석 분류 성능 평가 지표 (metric)", "url": "/posts/metric/", "categories": "python, regression", "tags": "python, regression, 회귀분석, ML, 머신러닝, tensorflow, 텐서플로우, logistic, 로지스틱", "date": "2021-09-05 19:00:00 +0900", "snippet": "분류 성능 평가 지표 (metric)일반 선형 회귀분석과 다르게 Logistic Regression 으로 넘어온다면, 내가 만든 모델이 잘되는지 성능을 평가하는 지표가 있다. 그걸 분류 성능 평가 지표 (metric)이라고 부른다.Q. 왜 logistic만 있나요? 연속형 실수 값을 갖는 레이블을 분석하는 Regression의 경우 연속형 실수의 값을 맞추기는 불가능하기때문이다. 반면, 이진 분류는 맞다/틀리다 둘 중하나로 나뉘기때문에 머신러닝의 효능을 평가할 수 있는 방법이 있다.여러가지의 평가지표가 있으며, 대표적인 세가지..." }, { "title": "python으로 하는 머신러닝 로지스틱 회귀분석", "url": "/posts/python_logistic_reg_with_code/", "categories": "python, regression", "tags": "python, regression, 회귀분석, ML, 머신러닝, tensorflow, 텐서플로우, logistic, 로지스틱", "date": "2021-09-05 18:34:00 +0900", "snippet": "Logistic Regression이번 포스팅에선 로지스틱 회귀분석을 python으로, tensorflow로, 그리고 sklearn으로 직접 구현해보자.공부시간과 시험 합격에 대한 데이터를 간단하게 직접 만들어서 사용하자.1. python으로 하는 logistic regression# 환경설정import numpy as np# 수치미분 def numerical_derivative(f, x): delta_x = 1e-4 derivative_x = np.zeros_like(x) it = np.ndi..." }, { "title": "python으로 하는 머신러닝 로지스틱 회귀분석 개념", "url": "/posts/python_logistic_regression/", "categories": "python, regression", "tags": "python, regression, 회귀분석, ML, 머신러닝, tensorflow, 텐서플로우, logistic, 로지스틱", "date": "2021-09-05 16:30:00 +0900", "snippet": "Logistic Regression지난번 포스팅에선 Machine Learning 으로 어떻게 회귀분석을 하는지 알아보았다.오늘은 레이블(t) 값이 0과 1 둘중 하나인 이산(discrete) 형태를 띄고 있을 때 어떻게 회귀분석을 할 수 있는지 알아보자.사실 학계에서는 이런 이산변수를 다루는 일보다 연속적인 값의 형태를 가진 종속변수를 다양한 방법론을 통해 분석하는 경우가 많다.( e.g. 총 노동 시간의 변화, 범죄율 증가 및 감소에 대한 연구, 정책에 따른 출산율 변화 등 )하지만 머신러닝에선 연속적인 값을 종속변수로 취..." }, { "title": "TensorFlow를 이용한 다중선형회귀분석", "url": "/posts/TensorFlow_multiple_regression/", "categories": "python, tensorflow", "tags": "python, regression, 회귀분석, ML, 머신러닝, tensorflow, 텐서플로우", "date": "2021-09-03 19:52:00 +0900", "snippet": "Multiple Linear Regression Using TensorFlow지난 포스팅에서 단일 변수를 갖고 sklearn 라이브러리와 기본 파이썬을 이용해서 선형회귀분석을 해보았다(링크).이번 포스팅에선 독립 변수 두개를 더 추가해서 총 3개의 독립변수를 갖고 진행해보도록 하자.\\[\\hat{y} = \\beta_0 + \\beta_1x_1 + \\beta_2x_2 + \\beta_3x_3\\]그리고 이젠 tensorflow라이브러리도 같이 활용을 할 예정이니 참고하길 바란다.기본적인 데이터 구성을 살펴보자면… x..." }, { "title": "TensorFlow 기초", "url": "/posts/TensorFlow_Fundamentals/", "categories": "python, tensorflow", "tags": "python, regression, 회귀분석, ML, 머신러닝, tensorflow, 텐서플로우", "date": "2021-09-03 17:35:00 +0900", "snippet": "TensorFlow머신러닝을 직접 사용해본적 없지만, 인공지능에 조금이라도 관심이 있는 사람들이라면 머신러닝이란 키워드를 들었을 때 아마 tensorflow 또는 pyTorch 둘 중 하나를 가장 먼저 떠올리지 않을까 생각된다.그만큼 너무 유명한 라이브러리이고 유명한만큼 유용한 라이브러리다.텐서플로우(tensorflow)는 Google에서 제공한 오픈소스 라이브러리이고, 계산과정과 모델을 데이터 흐름 그래프(data flow graph)를 사용하여 표현한다는것이 큰 특징이다.간단하게 Data Flow Graph에 대해 설명을 ..." }, { "title": "python으로 하는 머신러닝 선형회귀분석 이상치, 결치 처리 그리고 정규화", "url": "/posts/ML_reg_data_handling/", "categories": "python, regression", "tags": "python, differentiation, derivative, 미분, 파이썬, regression, 회귀분석, 이상치, 결치, ML, 머신러닝", "date": "2021-09-01 16:57:00 +0900", "snippet": "Linear Regression Data Handling이번 포스팅은 파이썬과 경사하강법 (Gradient Descent Algorithm)을 이용하여 지난번보다 더 정확한 회귀분석을 해보려고 한다. 그리고 최종적으로 내가 짠 코드와 알고리즘이 scikit learn 패키지에서 제공한 linear_model에 모듈에 비해서 얼마나 정확한지 비교해보려고 한다.“굳이 좋은 라이브러리 놔두고 왜 파이썬으로, 로우레벨 스타일로 직접 코딩을 해야하느냐?” 라고 의문을 가질 수도 있다.첫째로, 직접 A to Z 동작원리를 파악하고 구조를..." }, { "title": "python 머신러닝을 위한 Regression 그리고 경사하강법 (Gradient descent)", "url": "/posts/python_regression/", "categories": "python, regression", "tags": "python, ML, 머신러닝, 미분, 파이썬, 회귀분석, regression, MSE, OLS, gradient descent, 경사하강법", "date": "2021-08-28 13:15:00 +0900", "snippet": "선형 회귀분석 (Linear Regression)이번 포스팅은 머신러닝의 근간이 되는 친구인 Regression 에 대해서 간단하게 알아보자.사실 간단하게 내용을 정리할 수가 없다. 위대한 학자 Gauss가 어떻게 Least square라는 방법을 발견했으며, 회귀분석은 왜 회귀분석이며 그래서 이게 뭐 어떤걸 나타내며, 어떤 가정하에서는 다른 Regression method를 사용해야하며 등등 내로라하는 기관의 전공 대학원 학자들도 완벽하게 숙지하지 못한 사람이 꽤 있다.그래서, 이 포스팅에선 차, 포 다 떼고 이놈이 무엇..." }, { "title": "python으로 하는 수치미분 (Numerical Differentiation) (2)", "url": "/posts/python_partial_differentiation/", "categories": "python, mathematics", "tags": "python, differentiation, derivative, 미분, 파이썬", "date": "2021-08-26 16:17:00 +0900", "snippet": "python으로 편미분하기지난번 포스팅 (python으로 하는 수치미분 (Numerical Differentiation)에서 어떻게 파이썬으로 수치미분을 하는지 알아보았다.이번엔 다변수로 넘어가서 어떻게 편미분을 하여 미분 계수를 구하는지 한번 알아보자.다변수이기 때문에 코드가 비교적 더 복잡해진다.다음과 같은 식을 편미분해본다고 생각해보자.\\[f(x, y) = 2x + 3xy + y^3\\]음.. 코드 어제 배운거 있고, 수치미분 함수 하나 정의하고, 저 식에 대한 함수 하나 정의해서 “땋!” 적용하면 바로 결괏값 나오는거 ..." }, { "title": "python으로 하는 수치미분 (Numerical Differentiation)", "url": "/posts/numerical_differentiation/", "categories": "python, mathematics", "tags": "python, differentiation, numerical", "date": "2021-08-25 17:30:00 +0900", "snippet": "미분 (Differentiation) 📈“사실 미분은 크게 두 가지 종류가 있어요~”라고 말하며 해석미분은 무엇이고 수치미분은 무엇인지 장황한 설명을 시작으로 글을 쓰고 싶으나, 간단하게 수치미분이 무엇인지, 또 파이썬으로 하려면 필요한게 무엇인지만 설명한 뒤 바로 코드로 들어가자!!수치미분은 해석 미분을 수행할 수 없을 때, 정답은 아니지만 숫자를 입력해서 근사값을 구하는 방법이다.수치미분을 하기 위한 세 가지의 방법이 존재한다. (응 그렇고나 하고 넘어가자) 전향차분: $\\lim_{\\Delta x \\to 0} \\frac{..." }, { "title": "python Pandas (12) DataFrame Duplicates 중복값 제거", "url": "/posts/python_Pandas_duplicate/", "categories": "python, pandas", "tags": "python, numpy, pandas, drop_duplicates, duplicates", "date": "2021-08-24 17:27:00 +0900", "snippet": "중복 값 handling데이터를 다루면서 평균을 구하다보면 집계함수를 칼럼에 넣기 위해 중복된 값을 지워야하는 순간이 있다.그때를 위한 함수가 몇가지 있다.바로 예제를 보자.import numpy as npimport pandas as pddf = pd.DataFrame({ &#39;k1&#39;: [&#39;one&#39;] * 3 + [&#39;two&#39;] * 4, # 파이썬의 리스트에 더하기 의미는 리스트를 붙이란 소리임 &#39;k2&#39;: [1, 1, 2, 3, 3, 4, 4]}) display(..." }, { "title": "python Pandas (11) DataFrame Grouping", "url": "/posts/python_Pandas_groupby/", "categories": "python, pandas", "tags": "python, numpy, pandas, grouping, groupby", "date": "2021-08-24 16:47:00 +0900", "snippet": "DataFrame 그룹핑그룹핑은 pandas`기능과 데이터 분석의 꽃이 아닐까 생각한다.특정 집단의 집계함수나 유의미한 결과 추론은 어떤 형태의 데이터 분석이든간에 유용하게 쓰이기 때문이다.pandas 자료구조인 Series와 DataFrame을 갖고 어떻게 그룹핑을 하는지 알아보자.Series 그룹핑import numpy as npimport pandas as pd# 아래와같이 데이터 프레임을 하나 잡아주자!df = pd.DataFrame({ &#39;학과&#39;: [&#39;컴퓨터&#39;, &#39;철학&#39;,..." }, { "title": "python Pandas (10) DataFrame 특정값 처리 (이상치, 결치)", "url": "/posts/python_Pandas_nan_and_anomalies/", "categories": "python, pandas", "tags": "python, numpy, pandas, na", "date": "2021-08-24 15:52:00 +0900", "snippet": "DataFrame NaN 처리NaN을 처리하기 용이하게끔 만들어주는 몇 가지 함수를 알아보자.import numpy as npimport pandas as pdnp.random.seed(1) # 난수 사용을 위해 seed 설정df = pd.DataFrame(np.random.randint(0, 10, (6, 4))) # 6x4 matrix 생성df.columns = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;] # 컬럼명 설정df.index = pd.date_range(&#39..." }, { "title": "python Pandas (9) DataFrame Concatenation", "url": "/posts/python_Pandas_concat/", "categories": "python, pandas", "tags": "python, numpy, pandas, merge, concatenateness", "date": "2021-08-23 18:35:00 +0900", "snippet": "Series와 DataFrame을 연결(Concatenate)해보자지난 포스팅은 하나의 ‘키 🔑 ‘값을 기반으로 두 개의 DataFrame을 병합해보았다.이번에는 Series와 DataFrame을 단순히 연결하는 법을 배워보자.Series 연결해보기pandas Series를 사용해보자.import numpy as npimport pandas as pds1 = pd.Series([0,1], index=[&#39;a&#39;, &#39;c&#39;])s2 = pd.Series([4, 3, 2], index=[&#39;b&#39;,..." }, { "title": "python Pandas (8) DataFrame Merge", "url": "/posts/python_Pandas_merge/", "categories": "python, pandas", "tags": "python, numpy, pandas, merge, join", "date": "2021-08-23 17:35:00 +0900", "snippet": "DataFrame Merge에 대해서 알아보자DataFrame을 병합한다는 것은 말그대로 두개의 각기 다른 테이블을 하나로 합친다는 것이다.Database의 join과 같은 개념이다. Database의 행과 열로 구성된 table 이란 이름이 case와 변수로 구성된 DataFrame으로 변했을 뿐이다. 데이터를 공부하시는 분들이라면 DataFrame용어로 접할 일이 많을 것이다.Merge에 대한 여러 방법이 있는데 대표적인 세 가지만 한번 알아보자.1. Inner Joininner join은 합치고자 하는 두 개의 테이블(D..." }, { "title": "python Pandas (7) DataFrame 정렬", "url": "/posts/python_Pandas_df_sorting/", "categories": "python, pandas", "tags": "python, numpy, pandas, 프로그래밍, 데이터", "date": "2021-08-23 09:51:00 +0900", "snippet": "정렬바로 코드를 통해 알아보자.import numpy as npimport pandas as pd# 난수를 무작위로 줘서 데이터 정렬을 해보자.np.random.seed(1) # seed로 처음 난수 값을 고정df = pd.DataFrame(np.random.randint(0, 10, (6, 4))) # 6x4 매트릭스 생성 (요소 값은 0에서 9사이)df.columns = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;] # 컬럼값 추가df.index = pd.date_ran..." }, { "title": "python Pandas (6) NaN 핸들링", "url": "/posts/python_Pandas_nan_handling/", "categories": "python, pandas", "tags": "python, numpy, pandas, 프로그래밍, 데이터", "date": "2021-08-22 20:48:00 +0900", "snippet": "NaN 핸들링여러곳에서 데이터를 다루다보면 DataFrame내에 결치값을 심심치않게 보게 될 것이다.온전한 데이터를 갖기란 생각보다 굉장히 힘들기 때문이다.이번 포스팅은 NaN을 어떻게 핸들링 하는지 넌지시 얘기해보는 시간을 갖자.import numpy as npimport pandas as pddata = [[2, np.nan], [7, -3], [np.nan, np.nan], [1, -2]]df = pd.DataFrame(data, columns=[&#39..." }, { "title": "python Pandas (5) pandas_datareader 주식분석", "url": "/posts/python_Pandas_stock_analysis/", "categories": "python, pandas", "tags": "ML, python, numpy, pandas, 머신러닝, 주식", "date": "2021-08-22 19:45:00 +0900", "snippet": "pandas를 응용해보자!이번 포스팅에선 가볍게 주식 데이터를 불러와서 공분산과 상관계수를 사용해보고 해석해보는 시간을 갖겠다.오늘 사용할 모듈중 하나는 pandas_datareader 인데, 설치가 되어있지 않다면 pip install pandas_datareader 명령어를 통해 반드시 설치하자!import numpy as npimport pandas as pdimport pandas_datareader.data as pdr # data 라는 서브패키지를 사용할것임from datetime import datetime # 객..." }, { "title": "파이썬 클래스 상속", "url": "/posts/python_class_inheritance/", "categories": "python, class", "tags": "python, 파이썬, 클래스, class, 상속", "date": "2021-08-22 16:20:00 +0900", "snippet": "상속 (inheritance)간단하게 상속에 대해서 알아보자.상속은 기존 class 를 확장하여 멤버를 추가하거나 동작을 변경하는 방법이다.비슷한 class가 있다면 처음부터 다시 만들 필요 없이 상속받아 약간씩 입맛에 맞게끔 확장 및 변형하여 사용하면 된다.사람을 예로 들어보자.class Human: def __init__(self, age, name): self.age = age self.name = name def intro(self): print(&quot;{}살 {}입니..." }, { "title": "python Pandas (4) 데이터프레임 조작하기", "url": "/posts/python_Pandas_4/", "categories": "python, pandas", "tags": "ML, python, numpy, pandas, 머신러닝", "date": "2021-08-21 18:19:00 +0900", "snippet": "🐼 DataFrame 인덱스와 행(record, row, observation) 제어column에 집중했던 지난 시간에 이어 이번엔 행을 제어해보자.column은 상대적으로 제어하기가 용이했다. 왜냐면 column 하나하나가 pd.Series로써 각 컬럼당 하나의 데이터 타입만 갖고 있었기 때문이다.하지만 행 (row)는 다르다. 행은 여러개의 데이터 타입이 한곳에 뭉쳐있기 때문이다.예를 한번 들어보자.1번행은 이름(문자열), 성별(문자열), 나이(정수), 백신 접종 여부(boolean), 사용하는 컴퓨터 (문자열) 등등 “..." }, { "title": "python Pandas (3) 데이터프레임 조작하기", "url": "/posts/python_Pandas_3/", "categories": "python, pandas", "tags": "ML, python, numpy, pandas, 머신러닝", "date": "2021-08-21 17:15:00 +0900", "snippet": "🐼 DataFrame 인덱스와 칼럼명 제어pandas 세 번째 포스팅이다. 지난번 포스팅과는 다르게 이번에는 간단한 데이터를 하나 만들어서 어떤식으로 column을 추가하고 삭제하고 변경하고 마찬가지로 index를 효과적으로 조작할 수 있는지 한번 알아보자.import numpy as npimport pandas as pddata = { &#39;이름&#39;: [&#39;아이유&#39;, &#39;김연아&#39;, &#39;홍길동&#39;, &#39;강감찬&#39;], &#39;학과&#39;: [&#..." }, { "title": "python Pandas (2) open API 데이터가져와서 데이터프레임으로 불러오기", "url": "/posts/python_Pandas_2/", "categories": "python, pandas", "tags": "ML, python, numpy, pandas, 머신러닝", "date": "2021-08-20 17:00:00 +0900", "snippet": "음.. 사실 pandas를 정리해보면서 든 생각중 하나는 DataFrame의 세계나 활용도가 너무 광범위해서 하나를 설명할 때 데이터를 불러오는 방법에 대해서 순서에 맞게끔 단계별로 기록하는게 정말 힘들다.그냥 pandas 함수나 좀 기록하세욧!!뭐 사실 이렇게 하는것도 하나의 방법이 될 수 있다고 생각하지만, 이해를 해가며 공부하기에는 적합하지 않을 수 있다는게 필자의 생각이다.포스팅의 순서나 이런 내용 외적인 부분에 관해서는 계속해서 수정을 통해 다시 한 번 정렬하며 더 나은 방법을 찾아 정리를 해보겠다.서두가 길었다!우선..." }, { "title": "python Panda (1) 데이터프레임으로 데이터 가져오기", "url": "/posts/python_Pandas/", "categories": "python, pandas", "tags": "ML, python, numpy, pandas, 머신러닝", "date": "2021-08-20 14:00:00 +0900", "snippet": "pandas 🐼이 글을 읽고 있는 당신이 데이터와 연관된 직업에 종사하길 원한다면 그 어떤 직업군보다도 pandas와 친해야하며, 능숙해야하며, 그리고 이것이 세상과 소통하는 하나의 매개체가 되어야한다.파이썬의 라이브러리중에 가장 완성도 높고 훌륭한 라이브러리로 매년 꼽혀오는 pandas 이다.우선 NumPy를 모른다면 pandas를 배우기전에 numpy 부터 공부하고 오자. NumPy in my blogpandas 너 뭐하는 친구니?? 👯‍♂️pandas는 파이썬에 국한되어있지 않고, 전 스크립트 언어를 통틀어서 데이터 분..." }, { "title": "python NumPy만의 집계함수", "url": "/posts/python_NumPy_builtin_calc_function/", "categories": "python, NumPy", "tags": "ML, python, numpy, 머신러닝", "date": "2021-08-19 11:05:00 +0900", "snippet": "NumPy의 ndarray는 다양한 집계함수를 제공한다.조금이라도 numpy를 사용해보신 분들이라면, 아마 익숙한 기능일 것이다.전반적으로 가볍게 “이런 기능이 있어요~” 라고 소개를 하겠지만, 2차원이상부터는 axis를 설정하면서 계산을 하기 때문에 조금 자세하게(?) 다루지 않을까 생각한다.자 지지지지지(?)난번 포스팅에서 배웠던 ndarray를 만드는 여러가지 중 하나를 이용하여 예제를 만들어보자.arr = np.arange(1, 7, 1).reshape(2, 3).copy() # 2x3 matrix# copy를 쓰는 ..." }, { "title": "python NumPy만을 위한 반복문 iter (loop)", "url": "/posts/python_numpy_loop/", "categories": "python, NumPy", "tags": "ML, python, numpy, 머신러닝", "date": "2021-08-18 20:38:00 +0900", "snippet": "오늘 Numpy 관련 포스팅을 두개나 올릴 예정이다ㅎㅎ (현재 8월 18일) 미리 부지런한 내 스스로에게 박수를 👏이번 포스팅은 반복분 (loop)에 관해서 다루려고 한다.Q. 그냥 for, while 루프 쓰면 되지 않나요???조건부 가능하다. 1차원 데이터에서는 for루프 효율이 좋아보이기도 하고.그런데 numpy를 사용한다는 의미는 곧 데이터 분석을 위해 사용한다는 의미라고도 받아들여지는데 1차원인 데이터는 찾아보기 힘들다. 보통은 2차원 이상인 데이터가 있을뿐이지.“2차원도 왜요?? for문 두번 돌리면 되죠!!” =..." }, { "title": "파이썬과 객체지향, 그리고 절차지향의 이해 (3)", "url": "/posts/python_class_initializer/", "categories": "python, class", "tags": "object-oriented, python, 파이썬, 프로그래밍, 클래스, class, 생성자", "date": "2021-08-18 17:03:00 +0900", "snippet": "파이썬의 Class (2)지난 포스팅에서 class를 이용해서 학생을 만들어보았다. 어떻게 객체가 만들어지는지, 또 왜 class 를 사용해야하는지에 대해 살펴보았다.오늘은 포스팅의 시작을 __init__ 이라는 class안에서 가장 처음으로 정의된 메서드에 대해 얘기해보고자 한다.파이썬에서 이친구는 initializer라고 불리는데, 통칭적으로 “생성자”라고 불린다.어떨때 쓰여요?아래 예제를 통해 한번 살펴보자.# 자동차 class를 만들어보자.class Car(object): def set_car_spec(self, ..." }, { "title": "python NumPy를 이용한 수치 계산", "url": "/posts/python_numpy_calculation/", "categories": "python, NumPy", "tags": "ML, python, numpy, 머신러닝", "date": "2021-08-18 15:03:00 +0900", "snippet": "지난 포스팅에선 NumPy를 통한 배열(array) 핸들링을 어떻게 효과적으로 할 수 있을까에 대해서 알아보았다.이번 포스팅 또한 data handling에 근간이 되는 배열 연산에 대해서 알아보고자 한다.Numpy에 관련해서 3편의 포스팅을 올리는 동안에 혹자는 “어차피 데이터 핸들링 다 pandas로 처리하는데 왜 NumPy를 배워? pandas만 하면 되지” 이런 생각을 할 수 있으리라 생각한다. 하지만 pandas의 기본적인 자료구조가 numpy에서 파생되었고, 결국 데이터를 저장하는 방식이 numpy 방식이다. 그렇..." }, { "title": "python NumPy 인덱싱과 슬라이싱", "url": "/posts/python_NumPy_indexing_slicing/", "categories": "python, NumPy", "tags": "ML, python, numpy", "date": "2021-08-17 17:55:00 +0900", "snippet": "이번 포스팅에선 NumPy의 인덱싱(indexing)과 슬라이싱(slicing)에 대해 알아보자.Numpy는 머신러닝, 딥러닝의 기본적인 자료구조가 되는 친구라고 소개를 했는데, 오늘은 응용연산에 대해 두개의 포스팅으로 나누어 소개하고자 한다.numpy의 ndarray는 리스트와 굉장히 유사한 면이 많다는 것을 대부분의 사람들이 알고 있으리라 생각한다.**!!!!기본적인 indexing과 slicing 또한 python의 list와 거의 같다고 볼 수 있다. (하지만 본질적으로 다른 기능이 있음)우선 살펴보자!기본 인덱싱과 ..." }, { "title": "파이썬과 객체지향, 그리고 절차지향의 이해 (2)", "url": "/posts/python_and_object_oriented_example/", "categories": "python, class", "tags": "object-oriented", "date": "2021-08-17 15:00:00 +0900", "snippet": "파이썬의 class지난 포스팅에서도 언급했다시피 class는 객체모델링의 수단이다. (현실세계의 객체를 프로그래밍적으로 묘사하는 방법)이번 포스팅에선 학생이라는 객체를 프로그래밍 적으로 표현을 해보자.두가지 관점에 유의하며 class 를 만들어보자.1. 상태 (인스턴스)2. 행위 (메서드)좀더 구체적으로 묘사하며 학생을 떠올려보자.학생은 학년이 있을것이며, 학번이 있고, 전공, 학교, 키, 몸무게, 이름, 주소 등등 여러가지 상태를 갖고 있을 것이다. 이러한 상태는 “변수”를 만들어줘서 저장을 하게 되는데 이것을 파이썬에서..." }, { "title": "MongoDB shell 탐험하기", "url": "/posts/MongoDB_shell_exploration/", "categories": "DBMS, MongoDB", "tags": "DBMS, SQL, MongoDB", "date": "2021-08-16 21:50:00 +0900", "snippet": "본격적으로 MongoDB 를 통해 데이터베이스를 만들고, 도큐먼트에 값을 채워넣기전에 MongDB 구조에 대해 알아야할 필요가 있다.사실 필자는 컴퓨터 사이언스의 “Learning-by-doing”, 즉 직접 코딩을 하면서 지식을 쌓아가는 과정을 굉장히 좋아한다. 그렇지만 기본적인 근간이 되는 이론에 대해서는 엄격하게 먼저 훑고 지나가는 편이다.이번 포스팅 또한 MongDB의 구조와 구성요소를 포함하여 장황한 설명으로 시작하려했으나, 최대한 간결한 포스팅을 하고 싶어 구조적인 설명은 추후 그림과 함께 간략한 설명을 곁들여 본문..." }, { "title": "python NumPy 기초 (2)", "url": "/posts/python_NumPy_2/", "categories": "python, NumPy", "tags": "ML, python, numpy", "date": "2021-08-16 18:00:00 +0900", "snippet": "NumPy지난번 포스트와 https://rphabet.github.io/posts/python-_NumPy_1/ 마찬가지로 numpy 모듈에 대한 기본적인 것들을 짚어보는 시간을 갖겠다.결국 지난번 포스팅의 요점은 “ndarray 라는 numpy만의 data type 을 잘다룰 줄 알아야 data handling을 수월하게 할 수 있다” 라는 것으로 귀결되었는데, 이번 포스팅에서도 마찬가지로 handling 에 도움이 될만한 그리고 근본적인 부분을 건드리고자 한다.우선 아래의 코드를 보자.import numpy as npa..." }, { "title": "python NumPy 기초 (1)", "url": "/posts/python_NumPy_1/", "categories": "python, NumPy", "tags": "ML, python, numpy", "date": "2021-08-16 18:00:00 +0900", "snippet": "NumPynumpy 모듈의 실용성과 효율성은 입에 침이 마르도록 칭찬해도 부족함이 없다고 생각한다.벡터(vector)와 행렬(matrix)를 활용한 연산의 속도와 메모리 활용 효율성이 list() 와는 비교가 되지 않을뿐더러 머신러닝처럼 수학적 연산이 중요한 기술력에 근본적인 거름이 되어주는 모듈이기도 하다. (벡터: 1차원, 매트릭스: n차원)numpy는 파이썬 내장 기능이 아니기때문에 별도의 모듈 설치가 필요하다. 터미널을 열고 아래의 명령어를 입력하여 모듈을 설치해주자.$ pip install numpy설치가 완료되었다면..." }, { "title": "파이썬과 객체지향, 그리고 절차지향의 이해 (1)", "url": "/posts/python_and_object_oriented/", "categories": "python, class", "tags": "object-oriented", "date": "2021-08-16 13:00:00 +0900", "snippet": "음.. 필자와 같은 비전공자 출신이 처음 프로그래밍을 접했을 때 당황하는 모먼트가 분명 몇가지 있으리라 생각한다.혹자가 “가장 이해 하기 힘든 개념이 무엇이었나요?”라고 묻는다면, 지금 글을 쓰고 있는 시점의 나는 주저없이 class에 관해 얘기를 하지 않을까 싶다. 머릿속으로 이해를 해도 쉽게 생각한 부분이 이미지로 형상화가 잘되지않으며, class 안에 있는 속성 (instance)와 행위 (method)는 코딩을 할때마다 다시금 “이해를 하고 지금 코딩을 하는것인가?”라고 생각하게 만드는 기능이다.간략하게 내가 이해한 절..." }, { "title": "git error 403 해결 방법", "url": "/posts/HowToDealWithGit403Error/", "categories": "git", "tags": "git, issue", "date": "2021-08-15 13:00:00 +0900", "snippet": "안녕하세요.깃린이 빅벤입니다.음… 어제는 블로그 포스팅을 깃에 푸쉬하다가 굉장히 낯선 에러를 보았는데요.Bans-MacBook-Pro:Rphabet.github.io bangirimben$ git pushremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.remote: Please see https://github.blog/2020-12-15-token-authenti..." }, { "title": "MongoDB MAC OS 설치부터 실행까지", "url": "/posts/1_MongDB_Installation_for_Mac/", "categories": "DBMS, MongoDB", "tags": "DBMS, SQL, MongoDB", "date": "2021-08-14 23:00:00 +0900", "snippet": "관계형 DBMS가 아닌 NoSQL DBMS인 mongoDB의 특징까지 하나하나 열거하며 스스로 배웠던 부분에 대한 복습을 하고 싶지만, 우선 시간 부족이라는 좋은 핑계를 내세우며 간단하게 맥 개발 환경 구축정도만 설명하고 오늘의 포스팅을 마무리 하겠다.맥 개발 환경 구축Pre-requisite: mac OS 10.11 버전 이상이어야함 homebrew를 통해 terminal로 설치할 것이기에 brew 가 깔려 있어야한다.$ brew install node$ brew install mongodb-community@5.0 #..." }, { "title": "Posting for Comment Test", "url": "/posts/Comment-Testing/", "categories": "blogging", "tags": "jekyll", "date": "2021-08-12 09:00:00 +0900", "snippet": "댓글아 너 제대로 나오냐?출력이 된다면 좋겠습니다요." }, { "title": "What is Crossfit?", "url": "/posts/My-Second-Posting/", "categories": "Daily, Diary", "tags": "writing", "date": "2021-08-12 09:00:00 +0900", "snippet": "제발 되라 제발!보자 어떤 친구가 이미지 불러오기에 성공할 것인가.." }, { "title": "My Very First Posting (2nd attempt)", "url": "/posts/FirstPosting/", "categories": "Daily, Diary", "tags": "writing", "date": "2021-08-12 09:00:00 +0900", "snippet": "H1 입니다H2 입니다내 첫번째 깃헙 블로그 포스팅..과연 이게 출력이 잘될까?잘되길 바라며 내 첫번째 포스팅을 올려본다.수정했음# this is a sample code def add(a, b): return a + bhorizontal lineLatexbasic linear regression equation (probabilistic model)둘중의 어떤 수식이 먹히려나… 둘다 안먹히면 ㅂㄷㅂㄷ\\[ y = \\alpha + \\beta X + \\epsilon \\]\\[y = ax + \\epsilon\\]image upload..." } ]
